#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestMulti")]
	public partial class RegistarPostoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkStation(WorkStation instance);
    partial void UpdateWorkStation(WorkStation instance);
    partial void DeleteWorkStation(WorkStation instance);
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertDeviceType(DeviceType instance);
    partial void UpdateDeviceType(DeviceType instance);
    partial void DeleteDeviceType(DeviceType instance);
    #endregion
		
		public RegistarPostoDataContext() : 
				base(global::Server.Properties.Settings.Default.GestMultiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkStation> WorkStations
		{
			get
			{
				return this.GetTable<WorkStation>();
			}
		}
		
		public System.Data.Linq.Table<WorkStationDadosPendente> WorkStationDadosPendentes
		{
			get
			{
				return this.GetTable<WorkStationDadosPendente>();
			}
		}
		
		public System.Data.Linq.Table<WorkStationPendente> WorkStationPendentes
		{
			get
			{
				return this.GetTable<WorkStationPendente>();
			}
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<DeviceType> DeviceTypes
		{
			get
			{
				return this.GetTable<DeviceType>();
			}
		}
		
		public System.Data.Linq.Table<DevicesDadosPendente> DevicesDadosPendentes
		{
			get
			{
				return this.GetTable<DevicesDadosPendente>();
			}
		}
		
		public System.Data.Linq.Table<DevicesPendente> DevicesPendentes
		{
			get
			{
				return this.GetTable<DevicesPendente>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkStation")]
	public partial class WorkStation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _idClinic;
		
		private string _name;
		
		private string _macAddress;
		
		private string _uuid;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<bool> _isActive;
		
		private EntitySet<Device> _Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnidClinicChanging(int value);
    partial void OnidClinicChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmacAddressChanging(string value);
    partial void OnmacAddressChanged();
    partial void OnuuidChanging(string value);
    partial void OnuuidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public WorkStation()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_macAddress", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string macAddress
		{
			get
			{
				return this._macAddress;
			}
			set
			{
				if ((this._macAddress != value))
				{
					this.OnmacAddressChanging(value);
					this.SendPropertyChanging();
					this._macAddress = value;
					this.SendPropertyChanged("macAddress");
					this.OnmacAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uuid", DbType="NVarChar(500)")]
		public string uuid
		{
			get
			{
				return this._uuid;
			}
			set
			{
				if ((this._uuid != value))
				{
					this.OnuuidChanging(value);
					this.SendPropertyChanging();
					this._uuid = value;
					this.SendPropertyChanged("uuid");
					this.OnuuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkStation_Device", Storage="_Devices", ThisKey="id", OtherKey="idWorkstation")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.WorkStation = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.WorkStation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkStationDadosPendentes")]
	public partial class WorkStationDadosPendente
	{
		
		private long _idWorkStation;
		
		private int _idClinic;
		
		private bool _isFalha;
		
		public WorkStationDadosPendente()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWorkStation", DbType="BigInt NOT NULL")]
		public long idWorkStation
		{
			get
			{
				return this._idWorkStation;
			}
			set
			{
				if ((this._idWorkStation != value))
				{
					this._idWorkStation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this._idClinic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFalha", DbType="Bit NOT NULL")]
		public bool isFalha
		{
			get
			{
				return this._isFalha;
			}
			set
			{
				if ((this._isFalha != value))
				{
					this._isFalha = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkStationPendentes")]
	public partial class WorkStationPendente
	{
		
		private long _idWorkStation;
		
		private int _idClinic;
		
		private bool _isFalha;
		
		public WorkStationPendente()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWorkStation", DbType="BigInt NOT NULL")]
		public long idWorkStation
		{
			get
			{
				return this._idWorkStation;
			}
			set
			{
				if ((this._idWorkStation != value))
				{
					this._idWorkStation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this._idClinic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFalha", DbType="Bit NOT NULL")]
		public bool isFalha
		{
			get
			{
				return this._isFalha;
			}
			set
			{
				if ((this._isFalha != value))
				{
					this._isFalha = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Devices")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _idClinic;
		
		private System.Nullable<long> _idWorkstation;
		
		private long _idDeviceType;
		
		private string _name;
		
		private string _observations;
		
		private string _brand;
		
		private string _model;
		
		private string _serial;
		
		private string _barCode;
		
		private string _version;
		
		private string _ip;
		
		private string _port;
		
		private string _com;
		
		private string _macAddress;
		
		private bool _isActive;
		
		private long _createdBy;
		
		private System.DateTime _createdAt;
		
		private System.Nullable<long> _updatedBy;
		
		private System.Nullable<System.DateTime> _updatedAt;
		
		private EntityRef<WorkStation> _WorkStation;
		
		private EntityRef<DeviceType> _DeviceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnidClinicChanging(int value);
    partial void OnidClinicChanged();
    partial void OnidWorkstationChanging(System.Nullable<long> value);
    partial void OnidWorkstationChanged();
    partial void OnidDeviceTypeChanging(long value);
    partial void OnidDeviceTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnobservationsChanging(string value);
    partial void OnobservationsChanged();
    partial void OnbrandChanging(string value);
    partial void OnbrandChanged();
    partial void OnmodelChanging(string value);
    partial void OnmodelChanged();
    partial void OnserialChanging(string value);
    partial void OnserialChanged();
    partial void OnbarCodeChanging(string value);
    partial void OnbarCodeChanged();
    partial void OnversionChanging(string value);
    partial void OnversionChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void OnportChanging(string value);
    partial void OnportChanged();
    partial void OncomChanging(string value);
    partial void OncomChanged();
    partial void OnmacAddressChanging(string value);
    partial void OnmacAddressChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OncreatedByChanging(long value);
    partial void OncreatedByChanged();
    partial void OncreatedAtChanging(System.DateTime value);
    partial void OncreatedAtChanged();
    partial void OnupdatedByChanging(System.Nullable<long> value);
    partial void OnupdatedByChanged();
    partial void OnupdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedAtChanged();
    #endregion
		
		public Device()
		{
			this._WorkStation = default(EntityRef<WorkStation>);
			this._DeviceType = default(EntityRef<DeviceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWorkstation", DbType="BigInt")]
		public System.Nullable<long> idWorkstation
		{
			get
			{
				return this._idWorkstation;
			}
			set
			{
				if ((this._idWorkstation != value))
				{
					if (this._WorkStation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWorkstationChanging(value);
					this.SendPropertyChanging();
					this._idWorkstation = value;
					this.SendPropertyChanged("idWorkstation");
					this.OnidWorkstationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDeviceType", DbType="BigInt NOT NULL")]
		public long idDeviceType
		{
			get
			{
				return this._idDeviceType;
			}
			set
			{
				if ((this._idDeviceType != value))
				{
					if (this._DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._idDeviceType = value;
					this.SendPropertyChanged("idDeviceType");
					this.OnidDeviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_observations", DbType="NVarChar(300)")]
		public string observations
		{
			get
			{
				return this._observations;
			}
			set
			{
				if ((this._observations != value))
				{
					this.OnobservationsChanging(value);
					this.SendPropertyChanging();
					this._observations = value;
					this.SendPropertyChanged("observations");
					this.OnobservationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand", DbType="NVarChar(250)")]
		public string brand
		{
			get
			{
				return this._brand;
			}
			set
			{
				if ((this._brand != value))
				{
					this.OnbrandChanging(value);
					this.SendPropertyChanging();
					this._brand = value;
					this.SendPropertyChanged("brand");
					this.OnbrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="NVarChar(250)")]
		public string model
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OnmodelChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("model");
					this.OnmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serial", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string serial
		{
			get
			{
				return this._serial;
			}
			set
			{
				if ((this._serial != value))
				{
					this.OnserialChanging(value);
					this.SendPropertyChanging();
					this._serial = value;
					this.SendPropertyChanged("serial");
					this.OnserialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barCode", DbType="NVarChar(250)")]
		public string barCode
		{
			get
			{
				return this._barCode;
			}
			set
			{
				if ((this._barCode != value))
				{
					this.OnbarCodeChanging(value);
					this.SendPropertyChanging();
					this._barCode = value;
					this.SendPropertyChanged("barCode");
					this.OnbarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="NVarChar(250)")]
		public string version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="NVarChar(250)")]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_port", DbType="NVarChar(10)")]
		public string port
		{
			get
			{
				return this._port;
			}
			set
			{
				if ((this._port != value))
				{
					this.OnportChanging(value);
					this.SendPropertyChanging();
					this._port = value;
					this.SendPropertyChanged("port");
					this.OnportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_com", DbType="NVarChar(250)")]
		public string com
		{
			get
			{
				return this._com;
			}
			set
			{
				if ((this._com != value))
				{
					this.OncomChanging(value);
					this.SendPropertyChanging();
					this._com = value;
					this.SendPropertyChanged("com");
					this.OncomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_macAddress", DbType="NVarChar(250)")]
		public string macAddress
		{
			get
			{
				return this._macAddress;
			}
			set
			{
				if ((this._macAddress != value))
				{
					this.OnmacAddressChanging(value);
					this.SendPropertyChanging();
					this._macAddress = value;
					this.SendPropertyChanged("macAddress");
					this.OnmacAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdBy", DbType="BigInt NOT NULL")]
		public long createdBy
		{
			get
			{
				return this._createdBy;
			}
			set
			{
				if ((this._createdBy != value))
				{
					this.OncreatedByChanging(value);
					this.SendPropertyChanging();
					this._createdBy = value;
					this.SendPropertyChanged("createdBy");
					this.OncreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdAt", DbType="DateTime NOT NULL")]
		public System.DateTime createdAt
		{
			get
			{
				return this._createdAt;
			}
			set
			{
				if ((this._createdAt != value))
				{
					this.OncreatedAtChanging(value);
					this.SendPropertyChanging();
					this._createdAt = value;
					this.SendPropertyChanged("createdAt");
					this.OncreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedBy", DbType="BigInt")]
		public System.Nullable<long> updatedBy
		{
			get
			{
				return this._updatedBy;
			}
			set
			{
				if ((this._updatedBy != value))
				{
					this.OnupdatedByChanging(value);
					this.SendPropertyChanging();
					this._updatedBy = value;
					this.SendPropertyChanged("updatedBy");
					this.OnupdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> updatedAt
		{
			get
			{
				return this._updatedAt;
			}
			set
			{
				if ((this._updatedAt != value))
				{
					this.OnupdatedAtChanging(value);
					this.SendPropertyChanging();
					this._updatedAt = value;
					this.SendPropertyChanged("updatedAt");
					this.OnupdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkStation_Device", Storage="_WorkStation", ThisKey="idWorkstation", OtherKey="id", IsForeignKey=true)]
		public WorkStation WorkStation
		{
			get
			{
				return this._WorkStation.Entity;
			}
			set
			{
				WorkStation previousValue = this._WorkStation.Entity;
				if (((previousValue != value) 
							|| (this._WorkStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkStation.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._WorkStation.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._idWorkstation = value.id;
					}
					else
					{
						this._idWorkstation = default(Nullable<long>);
					}
					this.SendPropertyChanged("WorkStation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Device", Storage="_DeviceType", ThisKey="idDeviceType", OtherKey="id", IsForeignKey=true)]
		public DeviceType DeviceType
		{
			get
			{
				return this._DeviceType.Entity;
			}
			set
			{
				DeviceType previousValue = this._DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceType.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._DeviceType.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._idDeviceType = value.id;
					}
					else
					{
						this._idDeviceType = default(long);
					}
					this.SendPropertyChanged("DeviceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceType")]
	public partial class DeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private string _description;
		
		private bool _isActive;
		
		private System.DateTime _createdAt;
		
		private System.Nullable<System.DateTime> _updatedAt;
		
		private EntitySet<Device> _Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OncreatedAtChanging(System.DateTime value);
    partial void OncreatedAtChanged();
    partial void OnupdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedAtChanged();
    #endregion
		
		public DeviceType()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(350)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdAt", DbType="DateTime NOT NULL")]
		public System.DateTime createdAt
		{
			get
			{
				return this._createdAt;
			}
			set
			{
				if ((this._createdAt != value))
				{
					this.OncreatedAtChanging(value);
					this.SendPropertyChanging();
					this._createdAt = value;
					this.SendPropertyChanged("createdAt");
					this.OncreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> updatedAt
		{
			get
			{
				return this._updatedAt;
			}
			set
			{
				if ((this._updatedAt != value))
				{
					this.OnupdatedAtChanging(value);
					this.SendPropertyChanging();
					this._updatedAt = value;
					this.SendPropertyChanged("updatedAt");
					this.OnupdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Device", Storage="_Devices", ThisKey="id", OtherKey="idDeviceType")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DevicesDadosPendentes")]
	public partial class DevicesDadosPendente
	{
		
		private long _idDevice;
		
		private int _idClinic;
		
		private bool _isFalha;
		
		public DevicesDadosPendente()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDevice", DbType="BigInt NOT NULL")]
		public long idDevice
		{
			get
			{
				return this._idDevice;
			}
			set
			{
				if ((this._idDevice != value))
				{
					this._idDevice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this._idClinic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFalha", DbType="Bit NOT NULL")]
		public bool isFalha
		{
			get
			{
				return this._isFalha;
			}
			set
			{
				if ((this._isFalha != value))
				{
					this._isFalha = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DevicesPendentes")]
	public partial class DevicesPendente
	{
		
		private long _idDevice;
		
		private int _idClinic;
		
		private bool _isFalha;
		
		public DevicesPendente()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDevice", DbType="BigInt NOT NULL")]
		public long idDevice
		{
			get
			{
				return this._idDevice;
			}
			set
			{
				if ((this._idDevice != value))
				{
					this._idDevice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this._idClinic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFalha", DbType="Bit NOT NULL")]
		public bool isFalha
		{
			get
			{
				return this._isFalha;
			}
			set
			{
				if ((this._isFalha != value))
				{
					this._isFalha = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
