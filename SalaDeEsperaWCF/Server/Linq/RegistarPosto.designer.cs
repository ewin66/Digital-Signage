#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestMulti")]
	public partial class RegistarPostoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkStation(WorkStation instance);
    partial void UpdateWorkStation(WorkStation instance);
    partial void DeleteWorkStation(WorkStation instance);
    #endregion
		
		public RegistarPostoDataContext() : 
				base(global::Server.Properties.Settings.Default.GestMultiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RegistarPostoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkStation> WorkStations
		{
			get
			{
				return this.GetTable<WorkStation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkStation")]
	public partial class WorkStation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _idClinic;
		
		private string _name;
		
		private string _macAddress;
		
		private string _uuid;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<bool> _isActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnidClinicChanging(int value);
    partial void OnidClinicChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmacAddressChanging(string value);
    partial void OnmacAddressChanged();
    partial void OnuuidChanging(string value);
    partial void OnuuidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public WorkStation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinic", DbType="Int NOT NULL")]
		public int idClinic
		{
			get
			{
				return this._idClinic;
			}
			set
			{
				if ((this._idClinic != value))
				{
					this.OnidClinicChanging(value);
					this.SendPropertyChanging();
					this._idClinic = value;
					this.SendPropertyChanged("idClinic");
					this.OnidClinicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_macAddress", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string macAddress
		{
			get
			{
				return this._macAddress;
			}
			set
			{
				if ((this._macAddress != value))
				{
					this.OnmacAddressChanging(value);
					this.SendPropertyChanging();
					this._macAddress = value;
					this.SendPropertyChanged("macAddress");
					this.OnmacAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uuid", DbType="NVarChar(500)")]
		public string uuid
		{
			get
			{
				return this._uuid;
			}
			set
			{
				if ((this._uuid != value))
				{
					this.OnuuidChanging(value);
					this.SendPropertyChanging();
					this._uuid = value;
					this.SendPropertyChanged("uuid");
					this.OnuuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
