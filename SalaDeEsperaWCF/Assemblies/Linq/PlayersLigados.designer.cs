#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assemblies.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DigitalSignage")]
	public partial class PlayersLigadosDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertEndpoint(Endpoint instance);
    partial void UpdateEndpoint(Endpoint instance);
    partial void DeleteEndpoint(Endpoint instance);
    partial void InsertEndpointType(EndpointType instance);
    partial void UpdateEndpointType(EndpointType instance);
    partial void DeleteEndpointType(EndpointType instance);
    #endregion
		
		public PlayersLigadosDataContext() : 
				base(global::Assemblies.Properties.Settings.Default.DigitalSignageConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Endpoint> Endpoints
		{
			get
			{
				return this.GetTable<Endpoint>();
			}
		}
		
		public System.Data.Linq.Table<EndpointType> EndpointTypes
		{
			get
			{
				return this.GetTable<EndpointType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _idClinica;
		
		private string _privateIPAddress;
		
		private string _publicIPAddress;
		
		private string _privateHostname;
		
		private string _publicHostname;
		
		private bool _isActive;
		
		private EntitySet<Endpoint> _Endpoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnidClinicaChanging(int value);
    partial void OnidClinicaChanged();
    partial void OnprivateIPAddressChanging(string value);
    partial void OnprivateIPAddressChanged();
    partial void OnpublicIPAddressChanging(string value);
    partial void OnpublicIPAddressChanged();
    partial void OnprivateHostnameChanging(string value);
    partial void OnprivateHostnameChanged();
    partial void OnpublicHostnameChanging(string value);
    partial void OnpublicHostnameChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Player()
		{
			this._Endpoints = new EntitySet<Endpoint>(new Action<Endpoint>(this.attach_Endpoints), new Action<Endpoint>(this.detach_Endpoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinica", DbType="Int NOT NULL")]
		public int idClinica
		{
			get
			{
				return this._idClinica;
			}
			set
			{
				if ((this._idClinica != value))
				{
					this.OnidClinicaChanging(value);
					this.SendPropertyChanging();
					this._idClinica = value;
					this.SendPropertyChanged("idClinica");
					this.OnidClinicaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privateIPAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string privateIPAddress
		{
			get
			{
				return this._privateIPAddress;
			}
			set
			{
				if ((this._privateIPAddress != value))
				{
					this.OnprivateIPAddressChanging(value);
					this.SendPropertyChanging();
					this._privateIPAddress = value;
					this.SendPropertyChanged("privateIPAddress");
					this.OnprivateIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicIPAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string publicIPAddress
		{
			get
			{
				return this._publicIPAddress;
			}
			set
			{
				if ((this._publicIPAddress != value))
				{
					this.OnpublicIPAddressChanging(value);
					this.SendPropertyChanging();
					this._publicIPAddress = value;
					this.SendPropertyChanged("publicIPAddress");
					this.OnpublicIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privateHostname", DbType="VarChar(MAX)")]
		public string privateHostname
		{
			get
			{
				return this._privateHostname;
			}
			set
			{
				if ((this._privateHostname != value))
				{
					this.OnprivateHostnameChanging(value);
					this.SendPropertyChanging();
					this._privateHostname = value;
					this.SendPropertyChanged("privateHostname");
					this.OnprivateHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicHostname", DbType="VarChar(MAX)")]
		public string publicHostname
		{
			get
			{
				return this._publicHostname;
			}
			set
			{
				if ((this._publicHostname != value))
				{
					this.OnpublicHostnameChanging(value);
					this.SendPropertyChanging();
					this._publicHostname = value;
					this.SendPropertyChanged("publicHostname");
					this.OnpublicHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Endpoint", Storage="_Endpoints", ThisKey="ID", OtherKey="IDPlayer")]
		public EntitySet<Endpoint> Endpoints
		{
			get
			{
				return this._Endpoints;
			}
			set
			{
				this._Endpoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Endpoints(Endpoint entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Endpoints(Endpoint entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Endpoint")]
	public partial class Endpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _Type;
		
		private long _IDPlayer;
		
		private string _Address;
		
		private string _PublicPort;
		
		private string _PrivatePort;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<EndpointType> _EndpointType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnIDPlayerChanging(long value);
    partial void OnIDPlayerChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPublicPortChanging(string value);
    partial void OnPublicPortChanged();
    partial void OnPrivatePortChanging(string value);
    partial void OnPrivatePortChanged();
    #endregion
		
		public Endpoint()
		{
			this._Player = default(EntityRef<Player>);
			this._EndpointType = default(EntityRef<EndpointType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._EndpointType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPlayer", DbType="BigInt NOT NULL")]
		public long IDPlayer
		{
			get
			{
				return this._IDPlayer;
			}
			set
			{
				if ((this._IDPlayer != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPlayerChanging(value);
					this.SendPropertyChanging();
					this._IDPlayer = value;
					this.SendPropertyChanged("IDPlayer");
					this.OnIDPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicPort", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PublicPort
		{
			get
			{
				return this._PublicPort;
			}
			set
			{
				if ((this._PublicPort != value))
				{
					this.OnPublicPortChanging(value);
					this.SendPropertyChanging();
					this._PublicPort = value;
					this.SendPropertyChanged("PublicPort");
					this.OnPublicPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivatePort", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PrivatePort
		{
			get
			{
				return this._PrivatePort;
			}
			set
			{
				if ((this._PrivatePort != value))
				{
					this.OnPrivatePortChanging(value);
					this.SendPropertyChanging();
					this._PrivatePort = value;
					this.SendPropertyChanged("PrivatePort");
					this.OnPrivatePortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Endpoint", Storage="_Player", ThisKey="IDPlayer", OtherKey="ID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Endpoints.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Endpoints.Add(this);
						this._IDPlayer = value.ID;
					}
					else
					{
						this._IDPlayer = default(long);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EndpointType_Endpoint", Storage="_EndpointType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public EndpointType EndpointType
		{
			get
			{
				return this._EndpointType.Entity;
			}
			set
			{
				EndpointType previousValue = this._EndpointType.Entity;
				if (((previousValue != value) 
							|| (this._EndpointType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EndpointType.Entity = null;
						previousValue.Endpoints.Remove(this);
					}
					this._EndpointType.Entity = value;
					if ((value != null))
					{
						value.Endpoints.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("EndpointType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EndpointType")]
	public partial class EndpointType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Endpoint> _Endpoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EndpointType()
		{
			this._Endpoints = new EntitySet<Endpoint>(new Action<Endpoint>(this.attach_Endpoints), new Action<Endpoint>(this.detach_Endpoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EndpointType_Endpoint", Storage="_Endpoints", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Endpoint> Endpoints
		{
			get
			{
				return this._Endpoints;
			}
			set
			{
				this._Endpoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Endpoints(Endpoint entity)
		{
			this.SendPropertyChanging();
			entity.EndpointType = this;
		}
		
		private void detach_Endpoints(Endpoint entity)
		{
			this.SendPropertyChanging();
			entity.EndpointType = null;
		}
	}
}
#pragma warning restore 1591
