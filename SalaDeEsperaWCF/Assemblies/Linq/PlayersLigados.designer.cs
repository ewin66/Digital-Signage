#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assemblies.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DigitalSignage")]
	public partial class PlayersLigadosDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    #endregion
		
		public PlayersLigadosDataContext() : 
				base(global::Assemblies.Properties.Settings.Default.DigitalSignageConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlayersLigadosDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _idClinica;
		
		private string _privateIPAddress;
		
		private string _publicIPAddress;
		
		private string _privatePort;
		
		private string _publicPort;
		
		private string _privateHostname;
		
		private string _publicHostname;
		
		private string _wcfEndpoint;
		
		private bool _isActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnidClinicaChanging(int value);
    partial void OnidClinicaChanged();
    partial void OnprivateIPAddressChanging(string value);
    partial void OnprivateIPAddressChanged();
    partial void OnpublicIPAddressChanging(string value);
    partial void OnpublicIPAddressChanged();
    partial void OnprivatePortChanging(string value);
    partial void OnprivatePortChanged();
    partial void OnpublicPortChanging(string value);
    partial void OnpublicPortChanged();
    partial void OnprivateHostnameChanging(string value);
    partial void OnprivateHostnameChanged();
    partial void OnpublicHostnameChanging(string value);
    partial void OnpublicHostnameChanged();
    partial void OnwcfEndpointChanging(string value);
    partial void OnwcfEndpointChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Player()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClinica", DbType="Int NOT NULL")]
		public int idClinica
		{
			get
			{
				return this._idClinica;
			}
			set
			{
				if ((this._idClinica != value))
				{
					this.OnidClinicaChanging(value);
					this.SendPropertyChanging();
					this._idClinica = value;
					this.SendPropertyChanged("idClinica");
					this.OnidClinicaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privateIPAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string privateIPAddress
		{
			get
			{
				return this._privateIPAddress;
			}
			set
			{
				if ((this._privateIPAddress != value))
				{
					this.OnprivateIPAddressChanging(value);
					this.SendPropertyChanging();
					this._privateIPAddress = value;
					this.SendPropertyChanged("privateIPAddress");
					this.OnprivateIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicIPAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string publicIPAddress
		{
			get
			{
				return this._publicIPAddress;
			}
			set
			{
				if ((this._publicIPAddress != value))
				{
					this.OnpublicIPAddressChanging(value);
					this.SendPropertyChanging();
					this._publicIPAddress = value;
					this.SendPropertyChanged("publicIPAddress");
					this.OnpublicIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privatePort", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string privatePort
		{
			get
			{
				return this._privatePort;
			}
			set
			{
				if ((this._privatePort != value))
				{
					this.OnprivatePortChanging(value);
					this.SendPropertyChanging();
					this._privatePort = value;
					this.SendPropertyChanged("privatePort");
					this.OnprivatePortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicPort", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string publicPort
		{
			get
			{
				return this._publicPort;
			}
			set
			{
				if ((this._publicPort != value))
				{
					this.OnpublicPortChanging(value);
					this.SendPropertyChanging();
					this._publicPort = value;
					this.SendPropertyChanged("publicPort");
					this.OnpublicPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_privateHostname", DbType="VarChar(MAX)")]
		public string privateHostname
		{
			get
			{
				return this._privateHostname;
			}
			set
			{
				if ((this._privateHostname != value))
				{
					this.OnprivateHostnameChanging(value);
					this.SendPropertyChanging();
					this._privateHostname = value;
					this.SendPropertyChanged("privateHostname");
					this.OnprivateHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publicHostname", DbType="VarChar(MAX)")]
		public string publicHostname
		{
			get
			{
				return this._publicHostname;
			}
			set
			{
				if ((this._publicHostname != value))
				{
					this.OnpublicHostnameChanging(value);
					this.SendPropertyChanging();
					this._publicHostname = value;
					this.SendPropertyChanged("publicHostname");
					this.OnpublicHostnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wcfEndpoint", DbType="VarChar(MAX)")]
		public string wcfEndpoint
		{
			get
			{
				return this._wcfEndpoint;
			}
			set
			{
				if ((this._wcfEndpoint != value))
				{
					this.OnwcfEndpointChanging(value);
					this.SendPropertyChanging();
					this._wcfEndpoint = value;
					this.SendPropertyChanged("wcfEndpoint");
					this.OnwcfEndpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
